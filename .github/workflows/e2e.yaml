name: E2E

on:
  workflow_dispatch:
    inputs:
      pushImages:
        required: false
        default: "false"
        type: string
  workflow_call:
    inputs:
      pushImages:
        required: false
        default: "false"
        type: string

env:
  APP_ENV: prod
  IMAGE_PREFIX: ghcr.io/kilip/dungap
  PGPASSWORD: dungap-rocks
  DUNGAP_DATABASE_DSN: postgres://dungap:dungap-rocks@localhost/dungap
  DUNGAP_MESSENGER_TRANSPORT: doctrine://default?auto_setup=0

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: GOSS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup postgres
        run: |
          sudo systemctl start postgresql
          sudo -u postgres psql -d template1 -c "CREATE USER dungap WITH PASSWORD 'dungap-rocks' CREATEDB"
          createdb -h localhost -p 5432 -U dungap dungap
          pg_isready -d dungap -h localhost -p 5432 -U dungap

      - name: Build Tags
        id: vars
        uses: ./.github/actions/build-tags

      - name: Build Testing Container
        uses: ./.github/actions/build-test-image
        with:
          testingTag: ${{ steps.vars.outputs.testing }}

      - name: Setup Goss
        uses: e1himself/goss-installation-action@v1.2.1
        with:
          version: v0.4.6

      - name: Prepare Goss Tests
        shell: bash
        run: |-
          echo "DUNGAP_DATABASE_DSN=${DUNGAP_DATABASE_DSN}" >> .env.goss
          echo "DUNGAP_MESSENGER_TRANSPORT=${DUNGAP_MESSENGER_TRANSPORT}" >> .env.goss
          mkdir -p vars/log
          cp .env.goss vars/log/
          docker run \
            --rm \
            --network host \
            --env-file .env.goss \
            --entrypoint dungap-entrypoint \
            ${{steps.vars.outputs.testing}}

      - name: Run Goss tests
        id: dgoss
        shell: bash
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ./docker/goss.yaml
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: ./vars/log/container.log
        run: |-
          dgoss run \
            --network host \
            --env-file .env.goss \
            -v ./vars/log:/var/log/dungap \
            ${{steps.vars.outputs.testing}}

      - name: Upload goss logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: goss
          path: vars/log/*
        continue-on-error: true
