---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  default: task -l

  .compose:
    cmd: docker compose -f compose.yaml -f compose.override.yaml {{.args}}
    requirements:
      vars: [args]

  build:
    cmds:
      - task: .compose
        vars:
          args: build {{.CLI_ARGS}}

  up:
    desc: startup docker containers
    cmds:
      - task: .compose
        vars:
          args: up -d

  db:recreate:
    desc: recreate db
    cmds:
      - task: .sf
        vars:
          args: doctrine:schema:drop --force
      - task: .sf
        vars:
          args: doctrine:schema:create
      - task: .sf
        vars:
          args: doctrine:fixtures:load -n

  up:prod:
    desc: start production container
    cmd: docker compose -f compose.yaml -f compose.prod.yaml up -d

  stop:
    desc: stop container
    cmd: docker compose stop

  start:
    desc: start container
    cmd: docker compose start

  restart:
    desc: restart container
    cmds:
      - task: stop
      - task: start

  restart:tasks:
    desc: restart tasks
    cmds:
      - task: .exec
        vars:
          args: supervisorctl restart dungap-tasks:dungap-tasks_00
  .exec:
    cmds:
      - docker compose exec dungap {{.args}}
    requirements:
      vars: [args]

  logs:
    desc: show docker logs
    cmd: docker compose logs -f --tail 50

  logs:franken:
    desc: show franken logs
    cmd: docker compose exec dungap tail -f /var/log/dungap/caddy.log

  logs:pwa:
    desc: show pwa logs
    cmd: docker compose exec dungap tail -f /var/log/dungap/pwa.log

  logs:task:
    desc: show task logs
    cmd: docker compose exec dungap tail -f /var/log/dungap/tasks.log

  logs:messenger:
    desc: show messenger logs
    cmd: docker compose exec dungap tail -f /var/log/dungap/messenger.log

  rm:
    desc: remove containers
    cmds:
      - task: stop
      - docker compose rm -f

  shell:
    desc: execute into shell
    cmds:
      - docker compose exec dungap bash

  sf:cc:
    desc: clear cache
    cmds:
      - task: .sf
        vars:
          args: "cache:clear"

  sf:
    desc: execute symfony command
    cmds:
      - task: .sf
        vars:
          args: "{{.CLI_ARGS}}"

  .sf:
    cmd: docker compose exec dungap /srv/api/bin/console {{.args}}
    requirements:
      vars: [args]

  make:
    desc: Build production image and test it with goss
    cmds:
      - docker build --target production -f docker/Dockerfile -t dungap:production . {{.CLI_ARGS}}
      - task: goss

  goss:
    desc: Verify docker container for production
    cmds:
      - |
        docker run -it --rm \
          --network host \
          --env-file .env.goss \
          --entrypoint dungap-entrypoint \
          -v ./vars/dungap:/var/log/dungap \
          dungap:production
      - |
        dgoss run \
          -v ./vars/dungap:/var/log/dungap \
          --env-file .env.goss \
          dungap:production
    env:
      GOSS_FILE: ./docker/goss.yaml
      GOSS_OPTS: --retry-timeout 30s --sleep 2s --color --format documentation
      GOSS_SLEEP: 2
      GOSS_FILES_STRATEGY: cp
      CONTAINER_LOG_OUTPUT: ./vars/goss.log
